// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1.横向扩展：如需给当前实体 DeviceType 添加方法，可新建文件“SystemsServiceBase.DeviceType.cs”的分部类“public abstract partial class SystemsServiceBase”添加功能
//      2.纵向扩展：如需要重写当前实体 DeviceType 的业务实现，可新建文件“SystemsService.DeviceType.cs”的分部类“public partial class SystemsService”对现有方法进行方法重写实现
//</auto-generated>
//
// <copyright file="SystemsServiceBase.DeviceType.generated.cs" company="无">
//    
// </copyright>
// <site></site>
// <last-editor>ggcy</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Dependency;
using OSharp.Extensions;
using OSharp.Mapping;

using G2CyHome.Systems.Dtos;
using G2CyHome.Systems.Entities;


namespace G2CyHome.Systems
{
    public abstract partial class SystemsServiceBase
    {
        /// <summary>
        /// 获取 设备类型信息查询数据集
        /// </summary>
        public virtual IQueryable<DeviceType> DeviceTypes
        {
            get { return DeviceTypeRepository.QueryAsNoTracking(); }
        }

        /// <summary>
        /// 检查设备类型信息是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的设备类型信息编号</param>
        /// <returns>设备类型信息是否存在</returns>
        public virtual Task<bool> CheckDeviceTypeExists(Expression<Func<DeviceType, bool>> predicate, int id = default(int))
        {
            return DeviceTypeRepository.CheckExistsAsync(predicate, id);
        }

    /// <summary>
    /// 添加设备类型信息
    /// </summary>
    /// <param name="dtos">要添加的设备类型信息DTO信息</param>
    /// <returns>业务操作结果</returns>
    public virtual Task<OperationResult> CreateDeviceTypes(params DeviceTypeCreateInput[] dtos)
    {
    Check.Validate<DeviceTypeCreateInput, int>(dtos, nameof(dtos));
    return DeviceTypeRepository.InsertAsync(dtos);
    }
  
    /// <summary>
    /// 更新设备类型信息
    /// </summary>
    /// <param name="dtos">包含更新信息的设备类型信息DTO信息</param>
    /// <returns>业务操作结果</returns>
    public virtual Task<OperationResult> UpdateDeviceTypes(params DeviceTypeUpdateInput[] dtos)
    {
    Check.Validate<DeviceTypeUpdateInput, int>(dtos, nameof(dtos));
    return DeviceTypeRepository.UpdateAsync(dtos);
    }
  
    /// <summary>
    /// 删除设备类型信息
    /// </summary>
    /// <param name="ids">要删除的设备类型信息编号</param>
    /// <returns>业务操作结果</returns>
    public virtual Task<OperationResult> DeleteDeviceTypes(params int[] ids)
    {
    Check.NotNull(ids, nameof(ids));
    return DeviceTypeRepository.DeleteAsync(ids);
    }
      }
}
