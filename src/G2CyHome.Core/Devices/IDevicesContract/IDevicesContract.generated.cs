// -----------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类，可以遵守如下规则进行扩展：
//      1. 横向扩展：如需给当前模块添加方法接口，可新建文件“IDevicesContract.cs”的分部接口“public partial interface IDevicesContract”添加方法，并添加相应新的分部基类 abstract partial class DevicesServiceBase 实现新方法
//</auto-generated>
//
// <copyright file="IDevicesContract.generated.cs" company="无">
//    
//</copyright>
// <site></site>
// <last-editor>ggcy</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

using OSharp.Data;
using OSharp.Extensions;
using G2CyHome.Devices.Dtos;
using G2CyHome.Devices.Entities;


namespace G2CyHome.Devices
{
    /// <summary>
    /// 业务契约接口：设备管理模块
    ///</summary>
    public partial interface IDevicesContract
    {

  #region 设备记录信息业务
    /// <summary>
    /// 获取 设备记录信息查询数据集
    /// </summary>
    IQueryable<DeviceRecord> DeviceRecords { get; }

    /// <summary>
    /// 检查设备记录信息信息是否存在
    /// </summary>
    /// <param name="predicate">检查谓语表达式</param>
    /// <param name="id">更新的设备记录信息编号</param>
    /// <returns>设备记录信息是否存在</returns>
    Task<bool> CheckDeviceRecordExists(Expression<Func<DeviceRecord, bool>> predicate, Guid id = default(Guid));

    /// <summary>
    /// 添加设备记录信息信息
    /// </summary>
    /// <param name="dtos">要添加的设备记录信息DTO信息</param>
    /// <returns>业务操作结果</returns>
    Task<OperationResult> CreateDeviceRecords(params DeviceRecordCreateInput[] dtos);
  
    /// <summary>
    /// 更新设备记录信息信息
    /// </summary>
    /// <param name="dtos">包含更新信息的设备记录信息DTO信息</param>
    /// <returns>业务操作结果</returns>
    Task<OperationResult> UpdateDeviceRecords(params DeviceRecordUpdateInput[] dtos);
      
    /// <summary>
    /// 删除设备记录信息信息
    /// </summary>
    /// <param name="ids">要删除的设备记录信息编号</param>
    /// <returns>业务操作结果</returns>
    Task<OperationResult> DeleteDeviceRecords(params Guid[] ids);
    
    #endregion

    
  #region 传感器数据信息业务
    /// <summary>
    /// 获取 传感器数据信息查询数据集
    /// </summary>
    IQueryable<SensorData> SensorDatas { get; }

    /// <summary>
    /// 检查传感器数据信息信息是否存在
    /// </summary>
    /// <param name="predicate">检查谓语表达式</param>
    /// <param name="id">更新的传感器数据信息编号</param>
    /// <returns>传感器数据信息是否存在</returns>
    Task<bool> CheckSensorDataExists(Expression<Func<SensorData, bool>> predicate, int id = default(int));

    /// <summary>
    /// 添加传感器数据信息信息
    /// </summary>
    /// <param name="dtos">要添加的传感器数据信息DTO信息</param>
    /// <returns>业务操作结果</returns>
    Task<OperationResult> CreateSensorDatas(params SensorDataCreateInput[] dtos);
  
    /// <summary>
    /// 删除传感器数据信息信息
    /// </summary>
    /// <param name="ids">要删除的传感器数据信息编号</param>
    /// <returns>业务操作结果</returns>
    Task<OperationResult> DeleteSensorDatas(params int[] ids);
    
    #endregion

        }
}
