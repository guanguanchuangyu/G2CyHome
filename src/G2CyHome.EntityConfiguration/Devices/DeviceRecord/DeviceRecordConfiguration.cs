//------------------------------------------------------------------------------
// <auto-generated>
//    此代码由代码生成器生成。
//    手动更改此文件可能导致应用程序出现意外的行为。
//    如果重新生成代码，对此文件的任何修改都会丢失。
//    如果需要扩展此类：可遵守如下规则进行扩展：
//      1.横向扩展：如需添加额外的映射，可新建文件“DeviceRecordConfiguration.cs”的分部类“public partial class DeviceRecordConfiguration”实现分部方法 EntityConfigurationAppend 进行扩展
// </auto-generated>
//
// <copyright file="DeviceRecordConfiguration.generated.cs" company="无">
//     
// </copyright>
// <site></site>
// <last-editor>ggcy</last-editor>
// -----------------------------------------------------------------------

using System;
using System.Collections.Generic;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

using OSharp.Entity;

using G2CyHome.Devices.Entities;
using G2CyHome.Systems.Entities;

namespace G2CyHome.EntityConfiguration.Devices
{
    /// <summary>
    /// 实体配置类：设备记录信息
    /// </summary>
    public partial class DeviceRecordConfiguration
    {
        public override Type DbContextType => typeof(DeviceDbContext);
        /// <summary>
        /// 额外的数据映射
        /// </summary>
        partial void EntityConfigurationAppend(EntityTypeBuilder<DeviceRecord> builder)
        {
            builder.HasOne(x => x.Room)
                .WithMany(x => x.Devices).HasForeignKey(x => x.RoomId).HasConstraintName($"FK_Device_Room");

            builder.HasOne(x => x.DeviceType)
                .WithMany()
                .HasForeignKey(x => x.DevicetypeId).HasPrincipalKey(x => x.Id).HasConstraintName("FK_Device_Type");

            builder.HasIndex(x => x.RoomId).HasDatabaseName("IX_Device_RoomId");
            builder.HasIndex(x => x.DevicetypeId).HasDatabaseName("IX_Device_TypeId");

            builder.HasMany(p => p.Labels)
            .WithMany(p => p.Devices)
            .UsingEntity<DeviceLabel>(
                j => j
                    .HasOne(pt => pt.Label)
                    .WithMany(t => t.DeviceLabels)
                    .HasForeignKey(pt => pt.LabelId)
                    .HasConstraintName("FK_devicelabel_label"),
                  j => j.HasOne(x => x.Device)
                        .WithMany(x => x.DeviceLabels)
                        .HasForeignKey(x => x.DeviceId)
                        .HasConstraintName("FK_devicelabel_device"),
                  j =>
                  {
                      j.ToTable("devicelabel");
                      j.HasIndex(x => x.LabelId).HasDatabaseName("IX_Devicelabel_LabelId");
                      j.HasKey(t => new { t.DeviceId, t.LabelId }).HasName("PK_device_label");
                  }
                );
        }
    }
}
